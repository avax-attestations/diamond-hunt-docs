{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Diamond Hunt Docs AAS Social credit system About Diamond hunt is a on chain social credit system. The credits are awarded with a Diamond ERC20 token to users who recieve attestations based on interacting with avalanche projects. The projects has two github repositories: passport-contracts contains the solidity contracts and a client library for interacting with them and creating schemas passport-frontend contains both the frontend and API for signing attestations How it works Instead of the usual attestation flow where an EOA attests something for a recipient address the diamond hunt application uses a proxy contract to make the attestations. This allows end users to submit transactions (and pay for gas). The diamond hunt proxy only accepts attestations with a corresponding EIP712 signature from a trusted EOA address. The signed attestations are created by a web app with the private key of the trusted signing address. Upon succesful attestation the proxy mints an amount of diamonds to the attestation recipient. Whats next You can read about the [Architecture][architecture.md] to gain a deeper insight into how the system works. The Attestations page has a guide for expanding the system by adding new attestations types. The Deployment page contains information about the CI/CD process for deploying updates. The Contracts page contains addresses for all deployed contracts and ID's of schemas.","title":"About"},{"location":"#welcome-to-diamond-hunt-docs","text":"AAS Social credit system","title":"Welcome to Diamond Hunt Docs"},{"location":"#about","text":"Diamond hunt is a on chain social credit system. The credits are awarded with a Diamond ERC20 token to users who recieve attestations based on interacting with avalanche projects. The projects has two github repositories: passport-contracts contains the solidity contracts and a client library for interacting with them and creating schemas passport-frontend contains both the frontend and API for signing attestations","title":"About"},{"location":"#how-it-works","text":"Instead of the usual attestation flow where an EOA attests something for a recipient address the diamond hunt application uses a proxy contract to make the attestations. This allows end users to submit transactions (and pay for gas). The diamond hunt proxy only accepts attestations with a corresponding EIP712 signature from a trusted EOA address. The signed attestations are created by a web app with the private key of the trusted signing address. Upon succesful attestation the proxy mints an amount of diamonds to the attestation recipient.","title":"How it works"},{"location":"#whats-next","text":"You can read about the [Architecture][architecture.md] to gain a deeper insight into how the system works. The Attestations page has a guide for expanding the system by adding new attestations types. The Deployment page contains information about the CI/CD process for deploying updates. The Contracts page contains addresses for all deployed contracts and ID's of schemas.","title":"Whats next"},{"location":"architecture/","text":"Architecture The user flow from perspective a user visiting a site and receiving an attestation. Components A description of the main components of the diamond hunt app, familiarity with EAS service is assumed. Diamond Token The Diamond token is a modified ERC20 with transfer functionality disabled. The proxy is the sole account that can mint and burn tokens, it can burn tokens for any holder without prior approval. A users diamond balance is a measure of trusted they are based on attestations they have received. Proxy The proxy contract is the sole address that attests as part of the diamond hunt application. All attestations made by this address are valid diamond hunt attestations. The proxy serves multiple purposes with the core 3 being: Verifies signatures of attestations have been generated by a trusted address Attests with AAS with enabled schemas Mints/burns diamond tokens to recipients The proxy has a state variable attester , all attestations sent to the proxy must contain a valid signature from this account. This account can be updated with the updateAttester function. Schemas need to be enabled in the proxy (by the owner) before it will attest to them. To do this the addAttestationType function needs to be called with the following parameters: id (string which serves as the name) schema (bytes32 referencing an EAS schema ID) rewarder (address for a rewarder contract) After the proxy attests it mints diamond tokens to the attestation recipient according the a value returned by the rewarder. Rewarders Rewarders are simple contracts with a single public function rewardFor . This function receives encoded attestation data (decode with abi.decode ) and returns a uint256 amount which indicates how many diamonds to mint. There are two included rewarders that return a constant amount and a variable amount based on a value in the attestation. Web App The web application is responsible for: Verifying a user meets the criteria for receiving at attestation Populating attestation data and signing attestation The methods to verify criteria for an attestation is open ended and coded with typescript. Some implemented methods involve: Reading a list of addresses from a CSV (diamond hands) Querying an external API (joepegs, dex api) Performing authentication with an external service (twitter) Checking a signature is valid (referral system)","title":"Architecture"},{"location":"architecture/#architecture","text":"The user flow from perspective a user visiting a site and receiving an attestation.","title":"Architecture"},{"location":"architecture/#components","text":"A description of the main components of the diamond hunt app, familiarity with EAS service is assumed.","title":"Components"},{"location":"architecture/#diamond-token","text":"The Diamond token is a modified ERC20 with transfer functionality disabled. The proxy is the sole account that can mint and burn tokens, it can burn tokens for any holder without prior approval. A users diamond balance is a measure of trusted they are based on attestations they have received.","title":"Diamond Token"},{"location":"architecture/#proxy","text":"The proxy contract is the sole address that attests as part of the diamond hunt application. All attestations made by this address are valid diamond hunt attestations. The proxy serves multiple purposes with the core 3 being: Verifies signatures of attestations have been generated by a trusted address Attests with AAS with enabled schemas Mints/burns diamond tokens to recipients The proxy has a state variable attester , all attestations sent to the proxy must contain a valid signature from this account. This account can be updated with the updateAttester function. Schemas need to be enabled in the proxy (by the owner) before it will attest to them. To do this the addAttestationType function needs to be called with the following parameters: id (string which serves as the name) schema (bytes32 referencing an EAS schema ID) rewarder (address for a rewarder contract) After the proxy attests it mints diamond tokens to the attestation recipient according the a value returned by the rewarder.","title":"Proxy"},{"location":"architecture/#rewarders","text":"Rewarders are simple contracts with a single public function rewardFor . This function receives encoded attestation data (decode with abi.decode ) and returns a uint256 amount which indicates how many diamonds to mint. There are two included rewarders that return a constant amount and a variable amount based on a value in the attestation.","title":"Rewarders"},{"location":"architecture/#web-app","text":"The web application is responsible for: Verifying a user meets the criteria for receiving at attestation Populating attestation data and signing attestation The methods to verify criteria for an attestation is open ended and coded with typescript. Some implemented methods involve: Reading a list of addresses from a CSV (diamond hands) Querying an external API (joepegs, dex api) Performing authentication with an external service (twitter) Checking a signature is valid (referral system)","title":"Web App"},{"location":"attestations/","text":"Adding new attestations Creating Schema Creating Rewarder Enabling in Proxy Example","title":"Attestations"},{"location":"attestations/#adding-new-attestations","text":"","title":"Adding new attestations"},{"location":"attestations/#creating-schema","text":"","title":"Creating Schema"},{"location":"attestations/#creating-rewarder","text":"","title":"Creating Rewarder"},{"location":"attestations/#enabling-in-proxy","text":"","title":"Enabling in Proxy"},{"location":"attestations/#example","text":"","title":"Example"},{"location":"contracts/","text":"Contract Addresses Avalanche mainnet Fuji testnet Local node","title":"Contracts"},{"location":"contracts/#contract-addresses","text":"","title":"Contract Addresses"},{"location":"contracts/#avalanche-mainnet","text":"","title":"Avalanche mainnet"},{"location":"contracts/#fuji-testnet","text":"","title":"Fuji testnet"},{"location":"contracts/#local-node","text":"","title":"Local node"},{"location":"deployment/","text":"","title":"Deployment"}]}